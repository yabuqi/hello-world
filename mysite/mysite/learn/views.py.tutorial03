from django.shortcuts import get_object_or_404,render
from django.urls import reverse
from django.http import HttpResponse,HttpResponseRedirect,Http404

from django.template import RequestContext,loader
from .models import Choice,Question

from learn import models

def index(request):
	latest_question_list = Question.objects.order_by('-pub_date')[:5]
	#output = ','.join([p.question_text for p in latest_question_list])
	#template = loader.get_template('learn/index.html')
	#context = RequestContext(request,{'latest_question_list':latest_question_list})
	context = {
		'latest_question_list':latest_question_list,
	}
	return render(request,'learn/index.html',context)
	#return HttpResponse(output)
	#return HttpResponse(template.render(context,request))
	#return HttpResponse(template.render(context))

def detail(request,question_id):
	#return HttpResponse("You're looking at question %s." % question_id)
	'''
	try:
		question = Question.objects.get(pk=question_id)
	except Question.DoesNotExist:
		raise Http404("Question does not exist")
	'''
	question = get_object_or_404(Question,pk=question_id)
	return render(request,'learn/detail.html',{'question':question})

def results(request,question_id):
	#response = "You're looking at the results of question %s."
	#return HttpResponse(response % question_id)
	question = get_object_or_404(Question,pk = question_id)
	return render(request,'learn/results.html',{'question':question})

def vote(request,question_id):
	#return HttpResponse("You're voting on question %s." % question_id)
	question = get_object_or_404(Question,pk=question_id)
	try:
		selected_choice = question.choice_set.get(pk=request.POST['choice'])
	except (KeyError,Choice.DoesNotExist):
		return render(request,'learn/detail.html',{
			'question':question,
			'error_message':"You didn't select a choice.",
		})
	else:
		selected_choice.votes += 1
		selected_choice.save()
		return HttpResponseRedirect(reverse('learn:results',args=(question.id,)))
